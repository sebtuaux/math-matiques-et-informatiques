{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***Intercaler la somme***\n",
    "\n",
    "    Soit 'n' un entier naturel non nul.\n",
    "\n",
    "    On considère la suite (En) définie par : \n",
    "    \n",
    "         E1 = (1;1) et, pour tout entier naturel 'n' supérieur ou égal à 2, 'En' est la liste des nombres entiers naturels\n",
    "         obtenue en intercalant entre deux nombres consécutifs de la liste E(n-1) la somme de ces deux nombres."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nous allons écrire la fonction **intercale(En)** qui calcule le (n+1) - ième élément de la suite **(En)**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Nous adopterons les notations suivantes :\n",
    "    # En : n-ième élément de (En)\n",
    "    # N : nombre d'élément de En\n",
    "    # s : somme des éléments de En\n",
    "    # M : le maximum de En\n",
    "    # up : liste contenant les variables 'En', 'N', 's' et 'M'\n",
    "    \n",
    "def intercale(up):\n",
    "    ''' LISTE[ LISTE[int] * int * int * int ] -> LISTE[ LISTE[int] * int * int * int ]\n",
    "    hyp : n >=1\n",
    "    retourne E(n+1), sa taille , sa somme et son plus grand élément'''\n",
    "    \n",
    "    En, N, s, M = up[0], up[1], up[2], up[3]\n",
    "    L = []\n",
    "    \n",
    "    for i in range(N-1):\n",
    "        L.append(En[i])\n",
    "        a = En[i] + En[i+1]\n",
    "        s+=a\n",
    "        \n",
    "        if a > M:\n",
    "            M = a  \n",
    "            \n",
    "        L.append(a)\n",
    "        \n",
    "    L.append(En[N-1])\n",
    "    return [L,2*N-1,s,M]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 2, 3, 1] \n",
      "\n",
      "La taille de cette liste est : 5 \n",
      "\n",
      "La somme de la liste est :  10 \n",
      "\n",
      "Le plus grand élément de la liste est 3 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# testons intercale(En), voici le 3ème terme de (En) obtenu à partir du 2 ème : \n",
    "En =  [1, 2, 1]\n",
    "\n",
    "N , s , M = len(En), sum(En), max(En)\n",
    "\n",
    "up = intercale([En,N,s,M])\n",
    "\n",
    "print(up[0],\"\\n\")\n",
    "print(\"La taille de cette liste est :\",up[1],\"\\n\")\n",
    "print(\"La somme de la liste est : \",up[2],\"\\n\")\n",
    "print(\"Le plus grand élément de la liste est\",up[3],\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**intercale2(En,n)** est une définition récursive de **intercale(En)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def intercale2( up,n):\n",
    "    '''  LISTE[ LISTE[int] * int * int * int ] * int -> LISTE[ LISTE[int] * int * int * int ]\n",
    "    hyp : 1 <=n <= 19\n",
    "    retourne E(n+1), sa taille , sa somme et son plus grand élément'''\n",
    "    \n",
    "    if n>1:\n",
    "        return intercale2(intercale(up),n-1)\n",
    "    return up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 5, 4, 7, 3, 8, 5, 7, 2, 7, 5, 8, 3, 7, 4, 5, 1] \n",
      "\n",
      "La taille de cette liste est : 17 \n",
      "\n",
      "La somme de la liste est :  82 \n",
      "\n",
      "Le plus grand élément de la liste est 8 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# testons intercale2(En), voici le 3ème terme de (En) à partir du 1er: \n",
    "En =  [1,1]\n",
    "\n",
    "N , s , M = len(En), sum(En), max(En)\n",
    "\n",
    "up = intercale2([En,N,s,M], 5)\n",
    "\n",
    "print(up[0],\"\\n\")\n",
    "print(\"La taille de cette liste est :\",up[1],\"\\n\")\n",
    "print(\"La somme de la liste est : \",up[2],\"\\n\")\n",
    "print(\"Le plus grand élément de la liste est\",up[3],\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Les valeurs obtenues à l'aide des fonctions précédentes peuvent être calculer à l'aide des formules suivantes :\n",
    "\n",
    "        - N(n+1) = 2*N(N) - 1   ou   N(n) = 2^(n-1) + 1\n",
    "        \n",
    "        - S(n+1) = 3*S(n) - 2   ou   S(n) = 3^(n-1) + 1\n",
    "        \n",
    "        - M(n+2) = M(n+1) + M(n)  ou utiliser une formule explicite de la suite de fibonacci."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
